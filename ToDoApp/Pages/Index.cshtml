@page
@model ToDoApp.Pages.IndexModel
@{
    ViewData["Title"] = "To-Do List";
}

<div class="text-center">
    <h1 class="display-4">To-Do List</h1>
</div>

<section class="mt-4">
    <h2 class="text-center mb-4">Add a New Task</h2>
    <form method="post" class="card p-4 shadow">
        <div class="form-group mb-3">
            <label for="title" class="form-label">Title</label>
            <input type="text" class="form-control" id="title" name="Title" required minlength="3" maxlength="50">
        </div>
        <div class="form-group mb-3">
            <label for="description" class="form-label">Description</label>
            <textarea class="form-control" id="description" name="Description" rows="3" required minlength="10" maxlength="200"></textarea>
        </div>
        <div class="form-group mb-3">
            <label for="dueDate" class="form-label">Due Date</label>
            <input type="date" class="form-control" id="dueDate" name="DueDate" required min="@DateTime.Now.ToString("yyyy-MM-dd")">
        </div>
        <div class="form-group mb-3">
            <label for="category" class="form-label">Category</label>
            <select class="form-control" id="category" name="Category" required>
                <option value="Work">Work</option>
                <option value="Personal">Personal</option>
                <option value="Shopping">Shopping</option>
            </select>
        </div>
        <button type="submit" class="btn btn-primary w-100">Add Task</button>
    </form>
</section>

<section class="mt-5">
    <h2 class="text-center mb-4">Tasks</h2>
    <div class="mb-3">
        <label for="filter" class="form-label">Filter by Category</label>
        <select class="form-control" id="filter" onchange="filterTasks(this.value)">
            <option value="All">All</option>
            <option value="Work">Work</option>
            <option value="Personal">Personal</option>
            <option value="Shopping">Shopping</option>
        </select>
    </div>
    <ul class="list-group">
        @foreach (var task in Model.Tasks)
        {
            <li class="list-group-item mb-3 shadow">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <h3 class="h5">@task.Title</h3>
                        <p class="mb-1">@task.Description</p>
                        <p>Due Date: @task.DueDate.ToShortDateString()</p>
                        <p class="task-category">Category: @task.Category</p>
                        <p>Status: @(task.IsCompleted ? "Completed" : "Pending")</p>
                    </div>
                    <div>
                        <form method="post" asp-page-handler="Complete" asp-route-id="@task.Id" class="d-inline">
                            <button type="submit" class="btn btn-success btn-sm">
                                <i class="fas fa-check"></i> Complete
                            </button>
                        </form>
                        <form method="post" asp-page-handler="Delete" asp-route-id="@task.Id" class="d-inline ms-2">
                            <button type="submit" class="btn btn-danger btn-sm">
                                <i class="fas fa-trash"></i> Delete
                            </button>
                        </form>
                    </div>
                </div>
            </li>
        }
    </ul>
</section>

<script>
    function filterTasks(category) {
        const tasks = document.querySelectorAll('.list-group-item');
        tasks.forEach(task => {
            const taskCategory = task.querySelector('.task-category').textContent;
            if (category === 'All' || taskCategory.includes(category)) {
                task.style.display = 'block';
            } else {
                task.style.display = 'none';
            }
        });
    }
</script>